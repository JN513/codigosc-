pair <int, int> max_deep(int u) {
    int visitado[50005] = {0}, dist[50005] = {0};

    int deep = 0;

    queue <int> q;

    q.push(u);

    visitado[u] = 1;
    dist[u] = 0;

    int max_dist = 0;
    int qtd_max_dist = 0;

    while(!q.empty()){
        int u = q.front();
        q.pop();

        for(int j = 0; j < grafo[u].size(); j++){
            int v = grafo[u][j];

            if(visitado[v] == 0){
                visitado[v] = 1;
                dist[v] = dist[u] + 1;

                if(dist[v] > max_dist){
                    max_dist = dist[v];
                    qtd_max_dist = 1;
                } else if(dist[v] == max_dist){
                    qtd_max_dist++;
                }

                q.push(v);
            }
        }
    }

    return {max_dist, qtd_max_dist};
}